# ベースとなるイメージ
ARG UBUNTU_TAG
FROM ubuntu:${UBUNTU_TAG}

############################################
# .envまたはdockerコマンドより受け取る環境変数
############################################
ARG CONTAINER_USER
ARG CONTAINER_USER_PASS
ARG CONTAINER_ROOT_PASS
ARG GIT_REMOTE_REPOSITORY
ARG GIT_BRANCH
ARG GECKO_DRIVER

#LABELでメタ情報を入れることができる
LABEL maintainer="BrownieAtelierNewsCrawlerBase"

###################
# pipenv用の環境変数
###################
ENV PIPENV_VENV_IN_PROJECT 1

###################
# タイムゾーン設定
###################
ENV TZ Asia/Tokyo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

############################################################
# インストール
############################################################
# リポジトリ一覧を更新、インストール済みのパッケージ更新
# 必要なアプリをインストール
RUN apt update && apt update && apt -y upgrade
RUN apt -y install build-essential libssl-dev wget sudo git software-properties-common

# deb版firefoxをインストールするための設定
RUN add-apt-repository ppa:mozillateam/ppa
RUN echo 'Package: firefox* \nPin: release o=LP-PPA-mozillateam \nPin-Priority: 1001 ' | sudo tee /etc/apt/preferences.d/mozillateamppa
RUN apt update && apt -y install firefox libdbus-glib-1-2
RUN apt show firefox

# Selenium用にgeckodriverを取得して配置。不要になったダウンロードファイル削除
# RUN wget -P /usr/local/bin/ "https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz"
RUN wget -P /usr/local/bin/ ${GECKO_DRIVER}
RUN tar -zxvf /usr/local/bin/geckodriver-v0.33.0-linux64.tar.gz -C /usr/local/bin
RUN rm /usr/local/bin/geckodriver-v0.33.0-linux64.tar.gz

# pythonまわりのインストール
# RUN apt -y install python3.9 pipenv
RUN apt -y install python3.10-venv
RUN apt -y install python3-pip
RUN apt -y install python3-selenium
RUN pip install --upgrade pip
RUN pip install pipenv

# 更新時に使われたが、その後不要となったものの一括削除
# キャッシュされているがインストールされていないdebファイルを削除
# 不要なアプリを削除
RUN apt autoremove
RUN apt autoclean
RUN apt -y remove build-essential libssl-dev

#####################################
# ユーザー設定(root、一般)
#####################################
# rootユーザパスワード
RUN echo 'root:'${CONTAINER_ROOT_PASS} | chpasswd
# 新規グループ・一般ユーザーを作成。
RUN groupadd -g 1000 ${CONTAINER_USER}
RUN useradd  -g      ${CONTAINER_USER} -G sudo -m -s /bin/bash ${CONTAINER_USER}
# 一般ユーザパスワード
RUN echo ${CONTAINER_USER}':'${CONTAINER_USER_PASS} | chpasswd
# 一般ユーザーにsudo権限付与
RUN echo 'Defaults visiblepw' >> /etc/sudoers
RUN echo ${CONTAINER_USER}' ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

##########################################
# BrownieAtelierNewsCrawlerインストール
##########################################
# アプリ用ディレクトリ作成
WORKDIR /home/${CONTAINER_USER}

###############################
# 以下一般ユーザーでの操作
###############################
USER ${CONTAINER_USER}
RUN whoami

# git仮ユーザー登録
RUN git config --global user.email "kari@example.com"
RUN git config --global user.name "kari Name"

# git clone (サブモジュールごとクローンする)
RUN git clone --recursive ${GIT_REMOTE_REPOSITORY} -b "${GIT_BRANCH}"
# リポジトリの所有権でエラーが出ないように例外をコンフィグに登録
RUN git config --global --add safe.directory /home/${CONTAINER_USER}/BrownieAtelierNewsCrawler

# 仮想環境作成ディレクトリ
WORKDIR /home/${CONTAINER_USER}/BrownieAtelierNewsCrawler
# 仮想環境を作成
RUN python3 -m pipenv --python 3.10
# 仮想環境を有効化
# RUN python3 -m pipenv shell
# RUN "." .venv/bin/activate
# Pipfile.lockからインストール
RUN python3 -m pipenv sync
RUN .venv/bin/pip list

# prefect用ディレクトリ作成
RUN mkdir /home/${CONTAINER_USER}/BrownieAtelierNewsCrawler/data/prefect_data
# mongoDB接続用ca/pemファイルの格納ディレクトリ作成
RUN mkdir /home/${CONTAINER_USER}/mongo-key

ENTRYPOINT []
CMD []
